import os
import subprocess
from docx import Document
import mammoth
import magic
import logging
import fitz 
import pytesseract
from pdf2image import convert_from_path


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tesseract
pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"


def is_valid_docx(file_path):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º DOCX (ZIP-–∞—Ä—Ö–∏–≤–æ–º).
    """
    try:
        with open(file_path, "rb") as f:
            header = f.read(4)
        return header == b'PK\x03\x04'  # DOCX - —ç—Ç–æ zip-–∞—Ä—Ö–∏–≤, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å PK (ZIP signature)
    except Exception:
        return False

def convert_doc_to_docx(doc_file_path):
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç .doc –≤ .docx —Å –ø–æ–º–æ—â—å—é LibreOffice.
    """
    docx_file_path = doc_file_path.replace(".doc", ".docx")
    try:
        subprocess.run(
            [
                "libreoffice",
                "--headless",
                "--convert-to",
                "docx",
                doc_file_path,
                "--outdir",
                os.path.dirname(doc_file_path),
            ],
            check=True
        )
        if os.path.exists(docx_file_path):
            return docx_file_path
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ .doc –≤ .docx: {e}")

    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å .doc –≤ .docx.")


def extract_text_from_docx(docx_file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ .docx (–∏–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ .doc) –∏ —É–¥–∞–ª—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.
    """
    if not os.path.exists(docx_file_path):
        raise ValueError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {docx_file_path}")

    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª ZIP-–∞—Ä—Ö–∏–≤–æ–º (DOCX)
    if not is_valid_docx(docx_file_path):
        # –ï—Å–ª–∏ –Ω–µ ZIP, –º–æ–∂–µ—Ç –±—ã—Ç—å .doc (binary), —Ç–æ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å:
        if docx_file_path.lower().endswith(".doc"):
            docx_file_path = convert_doc_to_docx(docx_file_path)
            if not is_valid_docx(docx_file_path):
                raise ValueError(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {docx_file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º DOCX/DOC!")
        else:
            raise ValueError(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {docx_file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è DOCX/DOC –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω!")

    # 2. MIME-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è)
    #    –ú–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ try/except, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å—Å—è, –µ—Å–ª–∏ MIME = octet-stream
    try:
        import magic
        mime = magic.Magic(mime=True)
        file_type = mime.from_file(docx_file_path)

        # –ï—Å–ª–∏ MIME ‚Äî "application/octet-stream", –Ω–æ —Ñ–∞–π–ª ZIP ‚Üí –ø—Ä–∏–Ω–∏–º–∞–µ–º
        # –ï—Å–ª–∏ MIME ‚Äî "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ‚Üí —Ç–æ–∂–µ –æ–∫
        # –ï—Å–ª–∏ MIME ‚Äî "application/msword" ‚Üí —Ç–æ–∂–µ –æ–∫
        # –ò–Ω–∞—á–µ ‚Üí warning
        valid_mimes = {
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/msword",
            "application/octet-stream"
        }
        if file_type not in [
            "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            "application/msword",
            "application/octet-stream"
        ]:
            raise ValueError(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {docx_file_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è DOCX/DOC. –û–ø—Ä–µ–¥–µ–ª—ë–Ω –∫–∞–∫ {file_type}")

    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ MIME: {str(e)}")

    # 3. –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ DOCX
    try:
        document = Document(docx_file_path)
        full_text = "\n".join([p.text.strip() for p in document.paragraphs if p.text.strip()])
        if full_text.strip():
            return full_text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ python-docx: {e}")

    # 4. –ï—Å–ª–∏ python-docx –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å, –ø—Ä–æ–±—É–µ–º Mammoth
    try:
        with open(docx_file_path, "rb") as docx_file:
            import mammoth
            result = mammoth.extract_raw_text(docx_file)
            return result.value.strip()
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Mammoth: {e}")



def extract_text_from_scanned_pdf(file_path):
    """
    OCR –¥–ª—è PDF, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–ª–æ—è (—Å–∫–∞–Ω—ã).
    """
    text = ""
    try:
        images = convert_from_path(file_path)
        for image in images:
            text += pytesseract.image_to_string(image, lang="rus")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ OCR –¥–ª—è PDF: {e}")
    return text

def extract_text_from_pdf(file_path):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ PDF. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (—Å–∫–∞–Ω), –ø—Ä–æ–±—É–µ–º OCR.
    """
    text = ""
    try:
        doc = fitz.open(file_path)
        for page in doc:
            text += page.get_text("text")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF: {e}")

    if not text.strip():  # –ï—Å–ª–∏ PDF –ø—É—Å—Ç–æ–π, –ø—Ä–æ–±—É–µ–º OCR
        logging.info("üìÑ PDF –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ–±—É–µ–º OCR...")
        text = extract_text_from_scanned_pdf(file_path)

    return text

def extract_text_from_any_document(file_path: str) -> str:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –µ—Å–ª–∏ PDF ‚Üí PDF-–ª–æ–≥–∏–∫–∞,
    –µ—Å–ª–∏ DOC/DOCX ‚Üí docx-–ª–æ–≥–∏–∫–∞,
    –∏–Ω–∞—á–µ ‚Üí –æ—à–∏–±–∫–∞.
    """
    _, ext = os.path.splitext(file_path)
    ext = ext.lower()

    if ext in [".pdf"]:
        return extract_text_from_pdf(file_path)
    elif ext in [".doc", ".docx"]:
        return extract_text_from_docx(file_path)
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {ext}")
