import logging
import openai
from openai import OpenAI

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
client = OpenAI(api_key="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")

# ID –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (—Ñ–∏–ª—å—Ç—Ä-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç)
ASSISTANT_ID = "asst_GEmrQov7KBnSUOSfDnLk1Z32"

async def send_message_to_assistant(content: str) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–º—É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É OpenAI –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
    """
    try:
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—â–µ–Ω–∏—è
        thread = client.beta.threads.create()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
        client.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=content
        )

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        response_text = ""
        with client.beta.threads.runs.stream(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        ) as stream:
            for event in stream:
                if event.event == "thread.message.delta":
                    delta = event.data.delta
                    for block in delta.content:
                        if block.type == "text" and block.text.value:
                            response_text += block.text.value.strip()

                if event.event == "thread.message.completed":
                    break

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        logging.info(f"üìå –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {response_text}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç ‚Äì "true" –∏–ª–∏ "false"
        response_text = response_text.lower()
        if response_text not in ["true", "false"]:
            logging.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {response_text}")
            return "false"  # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        return response_text

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É: {e}")
        return "false"  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π



async def should_search_external(query: str) -> bool:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∏—Å–∫–∞ –≤ "–ì–∞—Ä–∞–Ω—Ç–µ" –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
    """
    try:
        prompt = f"–¢—Ä–µ–±—É–µ—Ç –ª–∏ —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∏—Å–∫ –≤ –°–ü–° –ì–∞—Ä–∞–Ω—Ç –∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'true' (–µ—Å–ª–∏ –¥–∞) –∏–ª–∏ 'false' (–µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è).\n–ó–∞–ø—Ä–æ—Å: {query}"
        response = await send_message_to_assistant(prompt)
        response = response.strip().lower()

        logging.info(f"üìå GPT-–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞: {query}")
        logging.info(f"üîç –ù—É–∂–µ–Ω –ø–æ–∏—Å–∫? {response}")

        if response == "true":
            return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–∏—Å–∫–∞: {e}")
        return False
