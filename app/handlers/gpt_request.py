"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GPT-4 —á–µ—Ä–µ–∑ OpenAI API.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.
"""
from openai import OpenAI
import json
import logging
from typing import Dict
from sqlalchemy.orm import Session 
from app.handlers.parallel_search import run_parallel_search
from app.utils import measure_time
from app.handlers.es_law_search import search_law_chunks
from app.handlers.garant_process import process_garant_request
from app.handlers.web_search import google_search, search_and_scrape
from app.services.deepresearch_service import DeepResearchService
from app.context_manager import ContextManager, OpenAIProvider
from app.models import Message 



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DeepResearchService
deep_research_service = DeepResearchService()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è OpenAI
client = OpenAI(api_key="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")

# –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç ID
ASSISTANT_ID = "asst_jaWku4zA0ufJJuxdG68enKgT"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è function calling
search_functions = [
    {
        "name": "search_law_chunks",
        "description": "–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∑–∞–∫–æ–Ω–æ–≤/–ø—Ä–∞–≤–æ–≤—ã—Ö –∞–∫—Ç–æ–≤ –≤ Elasticsearch.",
        "parameters": {
            "type": "object",
            "properties": {"query": {"type": "string"}},
            "required": ["query"]
        }
    },
    {
        "name": "search_garant",
        "description": "–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ API –ì–∞—Ä–∞–Ω—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ DeepResearch –±–µ–∑ summary.",
        "parameters": {
            "type": "object",
            "properties": {"query": {"type": "string"}},
            "required": ["query"]
        }
    },
    {
        "name": "search_web",
        "description": "–ü–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ DeepResearch –±–µ–∑ summary.",
        "parameters": {
            "type": "object",
            "properties": {"query": {"type": "string"}},
            "required": ["query"]
        }
    },
    {
        "name": "search_deep_research",
        "description": "–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DeepResearch.",
        "parameters": {
            "type": "object",
            "properties": {"query": {"type": "string"}},
            "required": ["query"]
        }
    }
]

def log_function_call(function_name: str, arguments: Dict) -> None:
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏."""
    logging.info(f"üîç –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê: {function_name}")
    logging.info(f"üîç –ê–†–ì–£–ú–ï–ù–¢–´: {json.dumps(arguments, ensure_ascii=False)}")


async def handle_function_call(function_name: str, arguments: Dict) -> Dict:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º."""
    query = arguments.get("query", "")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log_function_call(function_name, arguments)

    if function_name == "search_law_chunks":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ Elasticsearch –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            es_results = search_law_chunks(query)
            if es_results:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(es_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–æ–≤ –≤ Elasticsearch")
                for i, chunk in enumerate(es_results[:2]):  # –í—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 2 —á–∞–Ω–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    logging.info(f"üìÑ –ß–∞–Ω–∫ {i+1}: {chunk[:100]}...")
                
                deep_results = await deep_research_service.research("\n".join(es_results))
                return {"deep_research_results": deep_results.to_dict()}
            logging.info("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {"error": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ: {str(e)}"}

    elif function_name == "search_garant":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –ì–∞—Ä–∞–Ω—Ç–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ—É–Ω–∫—Ü–∏—é –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ process_garant_request
            def rag_module(level, message):
                logging_level = getattr(logging, level.upper(), logging.INFO)
                logging.log(logging_level, message)
                return f"[{level.upper()}] {message}"
                
            garant_results = process_garant_request(query, logs=[], rag_module=rag_module)
            if garant_results:
                logging.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ì–∞—Ä–∞–Ω—Ç–∞: {garant_results.get('docx_file_path', '')}")
                deep_results = await deep_research_service.research(garant_results.get("docx_file_path", ""))
                return {"deep_research_results": deep_results.to_dict()}
            logging.info("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ì–∞—Ä–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return {"error": "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ì–∞—Ä–∞–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ì–∞—Ä–∞–Ω—Ç–µ: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ì–∞—Ä–∞–Ω—Ç–µ: {str(e)}"}

    elif function_name == "search_web":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            logs = []
            web_results = google_search(query, logs=logs)
            
            for log in logs:
                logging.info(f"üåê {log}")
                
            if not web_results or len(web_results) == 0:
                logging.info("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.")
                return {"error": "–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ."}
                
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ –±–æ–≥–∞—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ —Å–∫—Ä–µ–π–ø–∏–Ω–≥
            try:
                logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö URL...")
                scraped_results = await search_and_scrape(query, logs=logs)
                scraped_texts = []
                for result in scraped_results:
                    if result.is_successful():
                        scraped_texts.append(f"URL: {result.url}\nTitle: {result.title}\nContent: {result.text[:500]}...")
                        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫—Ä–µ–π–ø–Ω—É—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {result.url} - {result.title}")
                
                if scraped_texts:
                    combined_text = "\n\n".join(scraped_texts)
                    logging.info(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∫—Ä–µ–π–ø–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ DeepResearch ({len(scraped_texts)} —Å—Ç—Ä–∞–Ω–∏—Ü)")
                    deep_results = await deep_research_service.research(combined_text)
                    return {"deep_research_results": deep_results.to_dict()}
            except Exception as scrape_error:
                logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: {str(scrape_error)}")
            
            # Fallback –∫ –æ–±—ã—á–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º, –µ—Å–ª–∏ —Å–∫—Ä–µ–π–ø–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
            logging.info(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ DeepResearch ({len(web_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤)")
            deep_results = await deep_research_service.research("\n".join(web_results))
            return {"deep_research_results": deep_results.to_dict()}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {str(e)}"}
    
    elif function_name == "search_deep_research":
        try:
            logging.info("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä—è–º–æ–≥–æ DeepResearch –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '%s'", query)
            deep_results = await deep_research_service.research(query)
            logging.info("‚úÖ DeepResearch —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
            return {"deep_research_results": deep_results.to_dict()}
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ deep research: {str(e)}")
            return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ deep research: {str(e)}"}

    logging.warning("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è '%s' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.", function_name)
    return {"error": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"}



@measure_time
async def send_custom_request(
    user_query: str, 
    thread_id: str,
    db: Session
) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É —Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º –≤–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.
    
    Args:
        user_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        thread_id: ID —Ç—Ä–µ–¥–∞
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        str: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    """
    logging.info(f"‚û°Ô∏è –ù–∞—á–∞–ª–æ send_custom_request —Å user_query='{user_query}'")

    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    messages_history = db.query(Message).filter_by(thread_id=thread_id).order_by(Message.created_at).all()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è ContextManager
    context_messages = [
        {"role": msg.role, "content": msg.content} 
        for msg in messages_history
    ]

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    openai_provider = OpenAIProvider(client)

    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    context_manager = ContextManager()
    
    # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    system_message = (
        "–¢—ã ‚Äî —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, "
        "—è –ø—Ä–æ–≤–µ–¥—É –º–Ω–æ–≥–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–æ–∏—Å–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ "
        "–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–≥–æ –∏ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
    )

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    prepared_context = context_manager.prepare_context(
        context_messages, 
        system_message
    )

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        search_results = await run_parallel_search(user_query)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –µ–¥–∏–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        combined_text = "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ Elasticsearch
        if "elasticsearch" in search_results and search_results["elasticsearch"]:
            combined_text += "## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞:\n\n"
            for i, chunk in enumerate(search_results["elasticsearch"][:10], 1):  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —á–∞–Ω–∫–æ–≤
                combined_text += f"{i}. {chunk}\n\n"
                
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ì–∞—Ä–∞–Ω—Ç–∞
        if "garant" in search_results and search_results["garant"].get("text"):
            combined_text += "## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ì–∞—Ä–∞–Ω—Ç–∞:\n\n"
            garant_text = search_results["garant"]["text"]
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            if len(garant_text) > 10000:
                combined_text += garant_text[:10000] + "...\n\n"
            else:
                combined_text += garant_text + "\n\n"
                
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞
        if "web" in search_results and search_results["web"]:
            combined_text += "## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:\n\n"
            for i, web_result in enumerate(search_results["web"][:5], 1):  # –ë–µ—Ä–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                combined_text += f"{i}. **{web_result['title']}**\n"
                combined_text += f"   URL: {web_result['url']}\n"
                combined_text += f"   {web_result['text'][:1000]}...\n\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ DeepResearch
        deep_research_service = DeepResearchService()
        deep_results = await deep_research_service.research(combined_text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        followup_prompt = """
        –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –ø–æ–¥–≥–æ—Ç–æ–≤—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "{query}"
        
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:
        {analysis}
        
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω:
        1. –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É
        2. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞–∑–¥–µ–ª—ã
        3. –í–∫–ª—é—á–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã, —Å—É–¥–µ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
        4. –ë—ã—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º –∏ –ø–æ–ª–Ω—ã–º
        
        –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –µ—Å—Ç—å —Å—É–¥–µ–±–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –∏–ª–∏ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç—ã, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏ –∏—Ö —Ä–µ–∫–≤–∏–∑–∏—Ç—ã (–Ω–æ–º–µ—Ä, –¥–∞—Ç—É, –æ—Ä–≥–∞–Ω).
        """
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        followup_response = client.chat.completions.create(
            model="gpt-4o",
            messages=prepared_context + [
                {"role": "user", "content": followup_prompt.format(
                    query=user_query,
                    analysis=deep_results.analysis
                )}
            ]
        )

        final_text = followup_response.choices[0].message.content
        logging.info(f"üì¢ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {final_text[:100]}...")
        return final_text

    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        logging.error(error_message)
        return f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"

# –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def send_custom_request_sync(user_query: str) -> str:
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è send_custom_request.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –Ω–µ–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –∫–æ–¥–µ.
    
    Args:
        user_query: –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
    Returns:
        str: –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    """
    import asyncio
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    try:
        loop = asyncio.get_event_loop()
    except RuntimeError:
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
    
    return loop.run_until_complete(
        send_custom_request(user_query=user_query)
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–∏—Ç–∞—Ç
def format_legal_references(text):
    """–û—Ñ–æ—Ä–º–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–æ–Ω—ã –∏ —Å—É–¥–µ–±–Ω—ã–µ –¥–µ–ª–∞ –≤ —Ç–µ–∫—Å—Ç–µ."""
    import re
    
    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–µ–π –∑–∞–∫–æ–Ω–æ–≤
    text = re.sub(r'(—Å—Ç\.\s*(\d+\.?\s*)+\s*–ì–ö\s*–†–§)', r'**\1**', text, flags=re.IGNORECASE)
    text = re.sub(r'(—Å—Ç\.\s*(\d+\.?\s*)+\s*–£–ö\s*–†–§)', r'**\1**', text, flags=re.IGNORECASE)
    
    # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –¥–µ–ª
    text = re.sub(r'(–¥–µ–ª–æ\s*‚Ññ?\s*[–ê-–Ø\d-]+/\d+)', r'*\1*', text, flags=re.IGNORECASE)
    
    return text

