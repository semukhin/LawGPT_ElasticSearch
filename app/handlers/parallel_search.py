import logging
from typing import Dict, Any
from app.handlers.es_law_search import search_law_chunks
from app.handlers.garant_process import process_garant_request
from app.handlers.web_search import search_and_scrape
import asyncio
import time
from app.handlers.es_law_search import search_law_chunks
from app.handlers.garant_process import process_garant_request
from app.handlers.web_search import search_and_scrape


async def run_parallel_search(query: str) -> Dict[str, Any]:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤–æ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.
    
    Args:
        query: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    """
    logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
    start_time = time.time()
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    def rag_module(level, message):
        logging_level = getattr(logging, level.upper(), logging.INFO)
        logging.log(logging_level, message)
        return f"[{level.upper()}] {message}"
    
    logs = []
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    async def search_elastic_task():
        try:
            logging.info("‚è≥ –ü–æ–∏—Å–∫ –≤ Elasticsearch...")
            es_results = search_law_chunks(query, top_n=10)
            return {"type": "elasticsearch", "results": es_results}
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ Elasticsearch: {str(e)}")
            return {"type": "elasticsearch", "results": [], "error": str(e)}
    
    async def search_garant_task():
        try:
            logging.info("‚è≥ –ü–æ–∏—Å–∫ –≤ –ì–∞—Ä–∞–Ω—Ç–µ...")
            garant_results = process_garant_request(query, logs=logs, rag_module=rag_module)
            if garant_results and "docx_file_path" in garant_results:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ docx
                from app.handlers.user_doc_request import extract_text_from_any_document
                docx_path = garant_results.get("docx_file_path")
                docx_text = extract_text_from_any_document(docx_path)
                return {
                    "type": "garant", 
                    "results": {"text": docx_text, "path": docx_path}
                }
            return {"type": "garant", "results": {}}
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ì–∞—Ä–∞–Ω—Ç–µ: {str(e)}")
            return {"type": "garant", "results": {}, "error": str(e)}
    
    async def search_web_task():
        try:
            logging.info("‚è≥ –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ...")
            scraped_results = await search_and_scrape(query, logs=logs)
            
            extracted_texts = []
            for result in scraped_results:
                if result.is_successful():
                    extracted_texts.append({
                        "url": result.url,
                        "title": result.title,
                        "text": result.text[:5000]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5000 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    })
                    
            return {"type": "web", "results": extracted_texts}
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ: {str(e)}")
            return {"type": "web", "results": [], "error": str(e)}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    tasks = [
        search_elastic_task(),
        search_garant_task(),
        search_web_task()
    ]
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
    results = await asyncio.gather(*tasks, return_exceptions=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    combined_results = {}
    
    for result in results:
        if isinstance(result, Exception):
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {str(result)}")
            continue
            
        combined_results[result["type"]] = result["results"]
    
    elapsed_time = time.time() - start_time
    logging.info(f"‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
    
    return combined_results