import openai
import os
import re
import logging
from fastapi import Request, UploadFile, File, Form, HTTPException, FastAPI
from fastapi.responses import JSONResponse, FileResponse
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from dotenv import load_dotenv
from typing import Dict, Any
from werkzeug.utils import secure_filename
from app.database import get_db
from app.models import User, Message, Thread, Document
from app.auth import get_current_user
from app.handlers.web_search import google_search
from app.handlers.garant_process import process_garant_request
from app.handlers.gpt_request import send_custom_request
from app.handlers.filter_gpt import send_message_to_assistant, should_search_external
from app.handlers.user_doc_request import extract_text_from_docx, extract_text_from_pdf, extract_text_from_any_document
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from app.auth import get_current_user
import asyncio
import inspect
from fastapi import APIRouter, Depends, HTTPException
from app.auth import get_current_user
from app.utils import measure_time
from datetime import datetime
from transliterate import translit
from pathlib import Path
import aiofiles



# Load environment variables
load_dotenv()

# OpenAI API credentials
OPENAI_API_KEY="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"
ASSISTANT_ID="asst_jaWku4zA0ufJJuxdG68enKgT"

if not OPENAI_API_KEY or not ASSISTANT_ID:
    raise ValueError("OPENAI_API_KEY or ASSISTANT_ID is missing from environment variables.")

# Initialize OpenAI client
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# FastAPI app instance
app = FastAPI(
    title="OpenAI Assistant API",
    description="API for managing OpenAI assistant threads and messages.",
    version="1.0.0"
)

router = APIRouter()

# File storage
UPLOAD_FOLDER = "uploads"
DOCUMENTS_FOLDER = "processed_documents"
DOCX_FOLDER = "/home/semukhin/Documents/GitHub/LawGPT_FastAPI_version/LawGPT_FastAPI_version/documents_docx"
os.makedirs(DOCX_FOLDER, exist_ok=True) 
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# OAuth2 (Bearer Token) Authentication
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")



# ========================== API –î–õ–Ø –ß–ê–¢–ê ==========================

router = APIRouter()

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class ChatRequest(BaseModel):
    query: str


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
os.makedirs(UPLOAD_FOLDER, exist_ok=True)



@measure_time
async def is_legal_query_gpt(query: str) -> bool:
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É —Ñ–∏–ª—å—Ç—Ä-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º?
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False.
    """
    try:
        classification_prompt = (
            "–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'true' –∏–ª–∏ 'false'.\n"
            f"–ó–∞–ø—Ä–æ—Å: {query}"
        )
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º send_message_to_assistant (—Ñ—É–Ω–∫—Ü–∏—è –∏–∑ filter_gpt)
        response = await send_message_to_assistant(classification_prompt)
        response = response.strip().lower()

        logging.info(f"üìå OpenAI GPT-–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        logging.info(f"üîç –û—Ç–≤–µ—Ç GPT: {response}")

        if response == "true":
            return True
        elif response == "false":
            return False
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {response}")
            return False  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏: {e}")
        return False


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
async def process_uploaded_file(file: UploadFile):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    original_filename = file.filename.replace(" ", "_")
    filename_no_ext, file_extension = os.path.splitext(original_filename)
    transliterated_filename = translit(filename_no_ext, 'ru', reversed=True)

    new_filename = f"{timestamp}_{transliterated_filename}{file_extension}"
    file_path = os.path.join(UPLOAD_FOLDER, new_filename)

    with open(file_path, "wb") as buffer:
        buffer.write(await file.read())

    logging.info(f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {file_path}")

    extracted_text = None
    if file_extension.lower() == ".docx":
        extracted_text = extract_text_from_docx(file_path)
    elif file_extension.lower() == ".pdf":
        extracted_text = extract_text_from_pdf(file_path)

    return file_path, extracted_text



# ========================== –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ß–ê–¢ ==========================
@measure_time
@router.post("/chat/{thread_id}")
async def chat_in_thread(
    request: Request,
    thread_id: str,
    query: str = Form(None),
    file: UploadFile = File(None),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    """
    –ß–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º:
    1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª (DOC/PDF) ‚Üí –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç (OCR/parsing), –ø–µ—Ä–µ–¥–∞—ë–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.
    2. –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø—Ä—è–º—É—é (–±–µ–∑ –ø–æ–∏—Å–∫–∞).
    3. –ï—Å–ª–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∞–π–ª–∞ ‚Üí –∏—â–µ–º –≤ –ì–∞—Ä–∞–Ω—Ç–µ, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ —Ç.–¥.
    """

    # 0. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –±—ã–ª —Ö–æ—Ç—è –±—ã —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª
    if not query and not file:
        raise HTTPException(status_code=400, detail="–ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª")

    # 1. –ò—â–µ–º (–∏–ª–∏ —Å–æ–∑–¥–∞—ë–º) —Ç—Ä–µ–¥
    thread = db.query(Thread).filter_by(id=thread_id, user_id=current_user.id).first()
    if not thread:
        new_thread = client.beta.threads.create()
        thread_id = new_thread.id
        thread = Thread(id=thread_id, user_id=current_user.id)
        db.add(thread)
        db.commit()

    # 2. (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —Ç—Ä–µ–¥–µ
    last_message = (
        db.query(Message)
        .filter_by(thread_id=thread_id, role="user")
        .order_by(Message.created_at.desc())
        .first()
    )

    extracted_text = None  # –°—é–¥–∞ –ø–æ–º–µ—Å—Ç–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª

    # 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–∫—Ä–µ–ø–∏–ª —Ñ–∞–π–ª ‚Üí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫
    if file and file.filename:
        try:
            # (A) –°—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            file_content = await file.read()
            if not file_content:
                raise HTTPException(status_code=400, detail="–û—à–∏–±–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π!")

            # (B) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            original_filename = file.filename.replace(" ", "_")
            filename_no_ext, file_extension = os.path.splitext(original_filename)

            try:
                transliterated_filename = translit(filename_no_ext, 'ru', reversed=True)
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏: {str(e)}")
                transliterated_filename = filename_no_ext

            new_filename = f"{timestamp}_{transliterated_filename}{file_extension}"
            file_path = os.path.join(UPLOAD_FOLDER, new_filename)

            # (C) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            async with aiofiles.open(file_path, "wb") as buffer:
                await buffer.write(file_content)

            # (D) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
            if not os.path.exists(file_path) or os.path.getsize(file_path) == 0:
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")

            logging.info(f"üìÅ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω: {file_path}")

            # (E) –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ë–î
            new_document = Document(user_id=current_user.id, file_path=file_path)
            db.add(new_document)
            db.commit()
            db.refresh(new_document)

            # (F) –ò–∑–≤–ª–µ–∫–∞–µ–º (OCR/parsing) —Ç–µ–∫—Å—Ç
            extracted_text = extract_text_from_any_document(file_path)
            logging.info(f"üìú –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{extracted_text}")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞")

        # (G) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ (–±–µ–∑ –ø–æ–∏—Å–∫–∞, skip_vector_store=True)
        assistant_response = send_custom_request(
            user_query=query,
            web_links=None,
            document_summary=extracted_text,  # –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
            skip_vector_store=True
        )

        # (H) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î
        db.add(Message(thread_id=thread_id, role="user", content=f"–î–æ–∫—É–º–µ–Ω—Ç: {new_filename}"))
        db.add(Message(thread_id=thread_id, role="assistant", content=assistant_response))
        db.commit()

        # (I) –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç ‚Äî –¥–æ–±–∞–≤–∏–º —Ç–∞–∫–∂–µ recognized_text, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª
        return {
            "assistant_response": assistant_response,
            "recognized_text": extracted_text,
            "file_name": new_filename,
            "file_path": file_path
        }

    # 4. –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ª–∏ –∑–∞–ø—Ä–æ—Å
    is_legal = await is_legal_query_gpt(query)
    logging.info(f"üìå –ó–∞–ø—Ä–æ—Å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {'—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π' if is_legal else '–ù–ï —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π'}: {query}")

    # 4.1 –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π ‚Üí –±–µ–∑ –ø–æ–∏—Å–∫–∞
    if not is_legal:
        assistant_response = send_custom_request(
            user_query=query,
            web_links=None,
            document_summary=None,
            skip_vector_store=False
        )
        db.add(Message(thread_id=thread_id, role="user", content=query))
        db.add(Message(thread_id=thread_id, role="assistant", content=assistant_response))
        db.commit()
        return {"assistant_response": assistant_response}

    # 5. –ò–Ω–∞—á–µ (—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∞–π–ª–∞), –ø—Ä–æ–≤–µ—Ä—è–µ–º need_search
    should_search = await should_search_external(query)
    if not should_search:
        # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω
        assistant_response = send_custom_request(
            user_query=query,
            web_links=None,
            document_summary=None
        )
        db.add(Message(thread_id=thread_id, role="user", content=query))
        db.add(Message(thread_id=thread_id, role="assistant", content=assistant_response))
        db.commit()
        return {"assistant_response": assistant_response, "new_thread_id": thread_id}

    # 6. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ (–ì–∞—Ä–∞–Ω—Ç, Google)
    logs = []
    loop = asyncio.get_event_loop()
    google_task = loop.run_in_executor(None, google_search, query, logs)
    garant_task = loop.run_in_executor(None, process_garant_request, query, logs, lambda lvl, msg: logs.append(msg))
    google_results, garant_results = await asyncio.gather(google_task, garant_task)

    google_summaries = [f"{res['summary']} ({res['link']})" for res in google_results]
    logging.info(f"üåê –ù–∞–π–¥–µ–Ω–æ {len(google_summaries)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ–±-–ø–æ–∏—Å–∫–∞")
    logging.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ì–ê–†–ê–ù–¢: {garant_results}")

    # 7. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É, –ø–æ–¥–º–µ—à–∏–≤–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    assistant_response = send_custom_request(
        user_query=query,
        web_links=google_summaries if google_summaries else None,
        # –ï—Å–ª–∏ extracted_text –æ—Å—Ç–∞–ª—Å—è None, –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º garant_results, –∏–Ω–∞—á–µ extracted_text
        document_summary=extracted_text if extracted_text else garant_results if garant_results else None
    )

    # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ „Äê\d+:\d+‚Ä†source„Äë
    assistant_response = remove_source_references(assistant_response)

    # 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏—Ç–æ–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    db.add(Message(thread_id=thread_id, role="user", content=query))
    db.add(Message(thread_id=thread_id, role="assistant", content=assistant_response))
    db.commit()

    # 9. –ï—Å–ª–∏ –ì–∞—Ä–∞–Ω—Ç –≤–µ—Ä–Ω—É–ª —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
    document_url = None
    if isinstance(garant_results, dict) and "document_url" in garant_results:
        base_url = str(request.base_url).rstrip("/")
        document_filename = garant_results["document_url"].split("/")[-1]
        document_url = f"{base_url}/download/{document_filename}"
        logging.info(f"üîó –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ: {document_url}")

    # 10. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = {"assistant_response": assistant_response}
    if document_url:
        response["document_download_url"] = document_url

    return response


def remove_source_references(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ „Äê4:18‚Ä†...„Äë, „Äê4:0‚Ä†...„Äë, „Äê4:11‚Ä†...„Äë –∏ —Ç. –ø.
    """
    # –®–∞–±–ª–æ–Ω: '„Äê\d+:\d+‚Ä†[^„Äë]*„Äë'
    # 1) '„Äê' - –æ—Ç–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    # 2) '\d+:\d+' - —á–∏—Å–ª–∞, –¥–≤–æ–µ—Ç–æ—á–∏–µ, —Å–Ω–æ–≤–∞ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4:18)
    # 3) '‚Ä†' - —Å–∏–º–≤–æ–ª '‚Ä†'
    # 4) '[^„Äë]*' - –ª—é–±–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º–≤–æ–ª–æ–≤, –∫—Ä–æ–º–µ '„Äë'
    # 5) '„Äë' - –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞
    pattern = r'„Äê\d+:\d+‚Ä†[^„Äë]*„Äë'
    return re.sub(pattern, '', text).strip()


# ========================== –ü—Ä–æ—á–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã ==========================

@measure_time
@router.post("/upload_file")
async def upload_file(
    file: UploadFile = File(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç—Ä–µ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    (–ü—Ä–∏–º–µ—Ä —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞; –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ.)
    """
    if not file.filename.endswith(".docx"):
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .docx —Ñ–∞–π–ª—ã.")

    thread = db.query(Thread).filter_by(user_id=current_user.id).order_by(Thread.created_at.desc()).first()
    if not thread:
        return JSONResponse(status_code=400, content={"error": "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç."})

    filename = file.filename.replace(" ", "_")
    file_path = os.path.join(UPLOAD_FOLDER, filename)

    async with aiofiles.open(file_path, "wb") as buffer:
        await buffer.write(await file.read())

    file_message = Message(thread_id=thread.id, role="user", content=file_path)
    db.add(file_message)
    db.commit()

    return {"message": "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", "filename": filename}


@router.get("/download/{filename}")
async def download_document(filename: str):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∏–≤–∞—Ç—å .docx –∏–∑ DOCUMENTS_FOLDER (–ø—Ä–∏–º–µ—Ä).
    """
    file_path = os.path.join(DOCX_FOLDER, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    return FileResponse(
        file_path,
        filename=filename,
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )


# ========================== API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ==========================
@measure_time
@router.get("/messages/{thread_id}")
async def get_messages(
    thread_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞.
    """
    messages = (
        db.query(Message)
        .filter_by(thread_id=thread_id)
        .order_by(Message.created_at)
        .all()
    )
    return {"messages": [{"role": msg.role, "content": msg.content, "created_at": msg.created_at} for msg in messages]}



@router.get("/chat/threads")
async def get_threads(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–µ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    threads = (
        db.query(Thread)
        .filter_by(user_id=current_user.id)
        .order_by(Thread.created_at)
        .all()
    )
    return {"threads": [{"id": thread.id, "created_at": thread.created_at} for thread in threads]}



# ========================== API –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–†–ï–î–û–í ==========================
@measure_time
@router.post("/create_thread")
async def create_new_thread(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –≤ OpenAI –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î.
    """
    thread = client.beta.threads.create()
    thread_id = thread.id

    new_thread = Thread(id=thread_id, user_id=current_user.id)
    db.add(new_thread)
    db.commit()

    return {"message": "Thread created successfully.", "thread_id": thread_id}


# ========================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–û–£–¢–ï–†–ê ==========================
app.include_router(router)
