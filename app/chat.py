import openai
import os
import re
import logging
from fastapi import FastAPI, HTTPException, Depends, UploadFile, File, APIRouter
from fastapi.responses import JSONResponse, FileResponse
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from dotenv import load_dotenv
from typing import Dict, Any
from werkzeug.utils import secure_filename
from app.database import get_db
from app.models import User, Message, Thread
from app.auth import get_current_user
from app.handlers.web_search import google_search
from app.handlers.garant_process import process_garant_request
from app.handlers.gpt_request import send_custom_request
from app.handlers.filter_gpt import send_message_to_assistant
from app.handlers.filter_gpt import should_search_external
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from app.auth import get_current_user
import asyncio
import inspect
from fastapi import APIRouter, Depends, HTTPException
from app.auth import get_current_user
from app.utils import measure_time


# Load environment variables
load_dotenv()

# OpenAI API credentials
OPENAI_API_KEY="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"
ASSISTANT_ID="asst_jaWku4zA0ufJJuxdG68enKgT"

if not OPENAI_API_KEY or not ASSISTANT_ID:
    raise ValueError("OPENAI_API_KEY or ASSISTANT_ID is missing from environment variables.")

# Initialize OpenAI client
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# FastAPI app instance
app = FastAPI(
    title="OpenAI Assistant API",
    description="API for managing OpenAI assistant threads and messages.",
    version="1.0.0"
)

router = APIRouter()

# File storage
UPLOAD_FOLDER = "uploads"
DOCUMENTS_FOLDER = "processed_documents"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# OAuth2 (Bearer Token) Authentication
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


def remove_source_references(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç —Å—Å—ã–ª–∫–∏ –≤–∏–¥–∞ """
    return re.sub(r'„Äê\d+:\d+‚Ä†source„Äë', '', text).strip()


# ========================== API –î–õ–Ø –ß–ê–¢–ê ==========================

router = APIRouter()

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class ChatRequest(BaseModel):
    query: str

router = APIRouter()

from app.handlers.filter_gpt import send_message_to_assistant


@measure_time
async def is_legal_query_gpt(query: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ —Ñ–∏–ª—å—Ç—Ä-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –ø–æ–ª—É—á–∞–µ—Ç True/False."""
    try:
        classification_prompt = f"–≠—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ 'true' –∏–ª–∏ 'false'.\n–ó–∞–ø—Ä–æ—Å: {query}"
        
        response = await send_message_to_assistant(classification_prompt)  # –î–æ–±–∞–≤–ª—è–µ–º await
        response = response.strip().lower()

        logging.info(f"üìå OpenAI GPT-–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞: {query}")
        logging.info(f"üîç –û—Ç–≤–µ—Ç GPT: {response}")

        if response == "true":
            return True
        elif response == "false":
            return False
        else:
            logging.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {response}")
            return False  # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ GPT: {e}")
        return False  # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–µ—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º



@measure_time
@router.post("/chat/{thread_id}")
async def chat_in_thread(
    thread_id: str,
    query: dict,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥. –ï—Å–ª–∏ —Ç—Ä–µ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID.
    """
    user_query = query.get("query")
    if not user_query:
        raise HTTPException(status_code=400, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ–¥
    thread = db.query(Thread).filter_by(id=thread_id, user_id=current_user.id).first()
    thread_created = False  # –§–ª–∞–≥, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥

    if not thread:
        new_thread = client.beta.threads.create()
        thread_id = new_thread.id
        thread_created = True

        thread = Thread(id=thread_id, user_id=current_user.id)
        db.add(thread)
        db.commit()

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    previous_messages = db.query(Message).filter_by(thread_id=thread_id).all()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    has_legal_context = False
    for msg in previous_messages:
        if msg.role == "user" and await is_legal_query_gpt(msg.content):
            has_legal_context = True
            break  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º
    is_legal = await is_legal_query_gpt(user_query)

    logging.info(f"üìå –ó–∞–ø—Ä–æ—Å –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {'—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π' if is_legal else '–ù–ï —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π'}: {user_query}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–æ–∏—Å–∫ –≤ –ì–∞—Ä–∞–Ω—Ç–µ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
    should_search = await should_search_external(user_query)

    if not has_legal_context and not is_legal:
        assistant_response = "–ü—Ä–∏–≤–µ—Ç! –Ø —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, —É—Ç–æ—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, '–ö–∞–∫ —Ä–∞—Å—Ç–æ—Ä–≥–Ω—É—Ç—å –¥–æ–≥–æ–≤–æ—Ä?'"
        logging.info(f"üëã –ù–ï —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å. –û—Ç–≤–µ—Ç: {assistant_response}")

        user_message = Message(thread_id=thread_id, role="user", content=user_query)
        db.add(user_message)
        db.commit()

        assistant_message = Message(thread_id=thread_id, role="assistant", content=assistant_response)
        db.add(assistant_message)
        db.commit()

        response = {"assistant_response": assistant_response}
        if thread_created:
            response["new_thread_id"] = thread_id  # –ï—Å–ª–∏ —Ç—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ ID
        return response

    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    if not should_search:
        assistant_response = send_custom_request(user_query=user_query)
        logging.info(f"üß† –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±–µ–∑ –ø–æ–∏—Å–∫–∞: {assistant_response}")

        user_message = Message(thread_id=thread_id, role="user", content=user_query)
        db.add(user_message)

        assistant_message = Message(thread_id=thread_id, role="assistant", content=assistant_response)
        db.add(assistant_message)

        db.commit()

        response = {"assistant_response": assistant_response}
        if thread_created:
            response["new_thread_id"] = thread_id  # –ï—Å–ª–∏ —Ç—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ ID
        return response

    # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º, –≤—ã–ø–æ–ª–Ω—è–µ–º –µ–≥–æ
    logs = []
    
    loop = asyncio.get_event_loop()
    if asyncio.iscoroutinefunction(google_search):
        google_results_task = asyncio.create_task(google_search(user_query, logs))
    else:
        google_results_task = loop.run_in_executor(None, google_search, user_query, logs)

    if asyncio.iscoroutinefunction(process_garant_request):
        garant_results_task = asyncio.create_task(process_garant_request(user_query, logs, lambda lvl, msg: logs.append(msg)))
    else:
        garant_results_task = loop.run_in_executor(None, process_garant_request, user_query, logs, lambda lvl, msg: logs.append(msg))

    google_results, garant_results = await asyncio.gather(google_results_task, garant_results_task)

    google_summaries = [f"{result['summary']} ({result['link']})" for result in google_results]

    logging.info(f"üåê –ù–∞–π–¥–µ–Ω–æ {len(google_summaries)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ–±-–ø–æ–∏—Å–∫–∞")
    logging.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ì–ê–†–ê–ù–¢: {garant_results}")

    assistant_response = send_custom_request(
        user_query=user_query,
        web_links=google_summaries,
        document_summary=garant_results
    )

    # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å—Å—ã–ª–æ–∫ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
    assistant_response = remove_source_references(assistant_response)
    logging.info(f"üß† –û—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: {assistant_response}")

    user_message = Message(thread_id=thread_id, role="user", content=user_query)
    db.add(user_message)

    assistant_message = Message(thread_id=thread_id, role="assistant", content=assistant_response)
    db.add(assistant_message)

    db.commit()

    response = {"assistant_response": assistant_response}
    
    if thread_created:
        response["new_thread_id"] = thread_id  # –ï—Å–ª–∏ —Ç—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ ID

    return response




# ========================== API –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í ==========================
@measure_time
@router.post("/upload_file")
async def upload_file(
    file: UploadFile = File(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç—Ä–µ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not file.filename.endswith(".docx"):
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .docx —Ñ–∞–π–ª—ã.")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    thread = db.query(Thread).filter_by(user_id=current_user.id).order_by(Thread.created_at.desc()).first()
    if not thread:
        return JSONResponse(status_code=400, content={"error": "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç."})

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    filename = secure_filename(file.filename)
    file_path = os.path.join(UPLOAD_FOLDER, filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(file_path, "wb") as buffer:
        buffer.write(await file.read())

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
    file_message = Message(thread_id=thread.id, role="user", content=file_path)
    db.add(file_message)
    db.commit()

    return {"message": "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", "filename": filename}



# ========================== API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ==========================
@measure_time
@router.get("/messages/{thread_id}")
async def get_messages(thread_id: str, current_user: User = Depends(get_current_user), db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞.
    """
    messages = db.query(Message).filter_by(thread_id=thread_id).order_by(Message.created_at).all()
    return {"messages": [{"role": msg.role, "content": msg.content, "created_at": msg.created_at} for msg in messages]}



# ========================== API –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–†–ï–î–û–í ==========================
@measure_time
@router.post("/create_thread")
async def create_new_thread(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π OpenAI thread, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID.
    """
    # –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–¥ –≤ OpenAI
    thread = client.beta.threads.create()
    thread_id = thread.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–¥ –≤ –ë–î
    new_thread = Thread(id=thread_id, user_id=current_user.id)
    db.add(new_thread)
    db.commit()

    return {"message": "Thread created successfully.", "thread_id": thread_id}

# ========================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–û–£–¢–ï–†–ê ==========================
app.include_router(router)
