from openai import OpenAI
import uuid
import os
import re
import logging
import asyncio
from datetime import datetime
from pathlib import Path
import unicodedata

from fastapi import Request, UploadFile, File, Form, HTTPException, FastAPI, APIRouter, Depends
from fastapi.responses import JSONResponse, FileResponse
from fastapi.security import OAuth2PasswordBearer
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from dotenv import load_dotenv
import aiofiles
from sqlalchemy.orm import Session

from app.database import get_db
from app.models import User, Message, Thread, Document
from app.auth import get_current_user
from app.handlers.web_search import google_search
from app.handlers.garant_process import process_garant_request
from app.handlers.gpt_request import send_custom_request
from app.handlers.es_law_search import search_law_chunks
from app.handlers.user_doc_request import extract_text_from_any_document
from app.utils import measure_time
from transliterate import translit


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# –ü–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
UPLOAD_FOLDER = "uploads"
DOCX_FOLDER = "documents_docx"

os.makedirs(UPLOAD_FOLDER, exist_ok=True)
os.makedirs(DOCX_FOLDER, exist_ok=True)

# OAuth2 —Å—Ö–µ–º–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="LawGPT Chat API",
    description="API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DeepResearch –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.",
    version="2.0.0"
)

router = APIRouter()

# ===================== –ú–æ–¥–µ–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ =====================

class ChatRequest(BaseModel):
    query: str

# ===================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ =====================

@measure_time
async def process_uploaded_file(file: UploadFile) -> tuple[str, str]:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ –Ω–µ–≥–æ —Ç–µ–∫—Å—Ç.
    
    Args:
        file: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        tuple[str, str]: –ö–æ—Ä—Ç–µ–∂ –∏–∑ (–ø—É—Ç—å_–∫_—Ñ–∞–π–ª—É, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π_—Ç–µ–∫—Å—Ç)
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    original_filename = file.filename.replace(" ", "_")
    filename_no_ext, file_extension = os.path.splitext(original_filename)
    transliterated_filename = translit(filename_no_ext, 'ru', reversed=True)

    new_filename = f"{timestamp}_{transliterated_filename}{file_extension}"
    file_path = os.path.join(UPLOAD_FOLDER, new_filename)

    async with aiofiles.open(file_path, "wb") as buffer:
        await buffer.write(await file.read())

    logging.info("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: %s", file_path)

    extracted_text = extract_text_from_any_document(file_path)
    logging.info("–ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞: %s", extracted_text[:200])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤

    return file_path, extracted_text


def fix_encoding(text):
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π"""
    if not isinstance(text, str):
        return text
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–æ–¥–∏—Ä–æ–≤–∫—É
    if any(ord(c) > 127 for c in text) and '√ê' in text:
        # –¢–µ–∫—Å—Ç —É–∂–µ –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–æ–¥–∏—Ä–æ–≤–æ–∫
            for source in ['latin1', 'cp1252', 'iso-8859-1']:
                for target in ['utf-8', 'cp1251']:
                    try:
                        fixed = text.encode(source).decode(target)
                        if '–∞' in fixed or '–ê' in fixed:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä—É—Å—Å–∫–∏–µ –±—É–∫–≤—ã
                            return fixed
                    except:
                        pass
        except:
            pass
    return text



# ===================== –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —á–∞—Ç–∞ =====================
@measure_time
@router.post("/chat/{thread_id}")
async def chat_in_thread(
    request: Request,
    thread_id: str,
    query: str = Form(...),
    file: UploadFile = File(None),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db),
):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º.
    –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª ‚Äî –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ DeepResearch.
    –ò–Ω–∞—á–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–∏—Å–∫ –≤ Elasticsearch, –ì–∞—Ä–∞–Ω—Ç–µ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
    """
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    try:
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥–∏—Ä–æ–≤–∫—É –∑–∞–ø—Ä–æ—Å–∞
        query = fix_encoding(query)
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è Unicode –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        query = unicodedata.normalize('NFC', query)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—è –¥–ª–∏–Ω—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        log_query = query[:100] + "..." if len(query) > 100 else query
        logging.info(f"üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: thread_id={thread_id}, query='{log_query}'")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
        # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
        try:
            query = query.encode('latin1').decode('utf-8')
            logging.info(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        except Exception as e:
            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É: {str(e)}")
        
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –ø–µ—Ä–µ–¥ –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    if isinstance(query, str):
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ query –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç—Ä–æ–∫–∞ –≤ UTF-8
        try:
            query.encode('utf-8').decode('utf-8')
        except UnicodeError:
            logging.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –≤ —Ç–µ–∫—Å—Ç–µ –∑–∞–ø—Ä–æ—Å–∞, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥–∏—Ä–æ–≤–∫—É
            try:
                query = query.encode('latin1').decode('utf-8', errors='replace')
            except:
                pass

    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ thread_id
    # –ï—Å–ª–∏ thread_id –±—É–∫–≤–∞–ª—å–Ω–æ —Ä–∞–≤–µ–Ω 'thread_id' –∏–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É UUID
    uuid_pattern = re.compile(r'^thread_[0-9a-f]{32}$')
    if thread_id == 'thread_id' or (not uuid_pattern.match(thread_id) and not thread_id.startswith('existing_')):
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π thread_id
        new_thread_id = f"thread_{uuid.uuid4().hex}"
        logging.info(f"‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π thread_id: {thread_id}. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: {new_thread_id}")
        thread_id = new_thread_id
    
    # 4. –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–¥–∞
    thread = db.query(Thread).filter_by(id=thread_id, user_id=current_user.id).first()
    if not thread:
        logging.info("üîë –¢—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
        thread = Thread(id=thread_id, user_id=current_user.id)
        db.add(thread)
        db.commit()

    # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if file:
        logging.info(f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {file.filename}")
        file_path, extracted_text = await process_uploaded_file(file)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        enhanced_query = f"{query}\n\n–î–æ–∫—É–º–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:\n{extracted_text[:2000]}..."
        
        # –ü–µ—Ä–µ–¥–∞–µ–º thread_id –∏ db –≤ send_custom_request
        assistant_response = await send_custom_request(
            user_query=enhanced_query, 
            thread_id=thread_id,
            db=db
        )

        db.add_all([
            Message(thread_id=thread_id, role="user", content=f"–î–æ–∫—É–º–µ–Ω—Ç: {file.filename}"),
            Message(thread_id=thread_id, role="assistant", content=assistant_response)
        ])
        db.commit()

        return {
            "assistant_response": assistant_response,
            "recognized_text": extracted_text,
            "file_name": file.filename,
            "file_path": file_path
        }
    else:
        # 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        logging.info("üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –±–µ–∑ —Ñ–∞–π–ª–∞.")

        # –ü–µ—Ä–µ–¥–∞–µ–º thread_id –∏ db –≤ send_custom_request
        assistant_response = await send_custom_request(
            user_query=query, 
            thread_id=thread_id,
            db=db
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        db.add_all([
            Message(thread_id=thread_id, role="user", content=query),
            Message(thread_id=thread_id, role="assistant", content=assistant_response)
        ])
        db.commit()

        return {"assistant_response": assistant_response}
    
# ===================== –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–µ–¥–∞–º–∏ =====================

@measure_time
@router.post("/create_thread")
async def create_thread(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    import uuid
    new_thread_id = f"thread_{uuid.uuid4().hex}"
    thread = Thread(id=new_thread_id, user_id=current_user.id)
    db.add(thread)
    db.commit()
    logging.info(f"üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥: {new_thread_id}")
    return {"thread_id": new_thread_id}


@measure_time
@router.get("/chat/threads")
async def get_threads(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    threads = db.query(Thread).filter_by(user_id=current_user.id).order_by(Thread.created_at.desc()).all()
    return {"threads": [{"id": t.id, "created_at": t.created_at} for t in threads]}

@measure_time
@router.get("/messages/{thread_id}")
async def get_messages(
    thread_id: str,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞."""
    messages = db.query(Message).filter_by(thread_id=thread_id).order_by(Message.created_at).all()
    return {"messages": [{"role": m.role, "content": m.content, "created_at": m.created_at} for m in messages]}

# ===================== –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ =====================

@measure_time
@router.post("/upload_file")
async def upload_file(
    file: UploadFile = File(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(get_db)
):
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    if not file.filename.lower().endswith(('.docx', '.pdf')):
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .docx –∏ .pdf.")

    file_path, _ = await process_uploaded_file(file)
    
    new_document = Document(user_id=current_user.id, file_path=file_path)
    db.add(new_document)
    db.commit()

    logging.info("üì• –§–∞–π–ª '%s' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.", file.filename)
    return {"message": "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.", "file_path": file_path}

@router.get("/download/{filename}")
async def download_document(filename: str):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç."""
    file_path = os.path.join(DOCX_FOLDER, filename)
    if not os.path.exists(file_path):
        raise HTTPException(status_code=404, detail="–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    logging.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ '%s' –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ.", filename)
    return FileResponse(
        path=file_path,
        filename=filename,
        media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    )

# ===================== –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ =====================

app.include_router(router)