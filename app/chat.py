import openai
import json
import asyncio
import os
import logging
from fastapi import FastAPI, HTTPException, Depends, UploadFile, File, APIRouter
from fastapi.responses import JSONResponse, FileResponse
from fastapi.security import OAuth2PasswordBearer
from sqlalchemy.orm import Session
from pathlib import Path
from dotenv import load_dotenv
from typing import Dict, Any
from werkzeug.utils import secure_filename
from app import models, database
from app.models import User, Message, Thread
from app.auth import get_current_user
from app.handlers.web_search import google_search
from app.handlers.gpt_handler import process_docx_with_assistant
from app.handlers.summary_history import create_summary_for_thread
from app.handlers.garant_process import process_garant_request
from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from sqlalchemy.orm import Session
from app import database
from app.models import User, Message, Thread
from app.auth import get_current_user
from app.handlers.web_search import google_search
from app.handlers.garant_process import process_garant_request
from app.handlers.gpt_request import send_custom_request
import asyncio
import logging



# Load environment variables
load_dotenv()

# OpenAI API credentials
OPENAI_API_KEY="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"
ASSISTANT_ID="asst_jaWku4zA0ufJJuxdG68enKgT"

if not OPENAI_API_KEY or not ASSISTANT_ID:
    raise ValueError("OPENAI_API_KEY or ASSISTANT_ID is missing from environment variables.")

# Initialize OpenAI client
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# FastAPI app instance
app = FastAPI(
    title="OpenAI Assistant API",
    description="API for managing OpenAI assistant threads and messages.",
    version="1.0.0"
)

router = APIRouter()

# File storage
UPLOAD_FOLDER = "uploads"
DOCUMENTS_FOLDER = "processed_documents"
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

# OAuth2 (Bearer Token) Authentication
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="login")

# Configure logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")


# ========================== API –î–õ–Ø –ß–ê–¢–ê ==========================

router = APIRouter()

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class ChatRequest(BaseModel):
    query: str


@router.post("/chat/{thread_id}")
async def chat_in_thread(
    thread_id: str,
    query: dict,
    current_user: User = Depends(get_current_user),
    db: Session = Depends(database.get_db),
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥. –ï—Å–ª–∏ —Ç—Ä–µ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID.
    """
    user_query = query.get("query")
    if not user_query:
        raise HTTPException(status_code=400, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç—Ä–µ–¥
    thread = db.query(Thread).filter_by(id=thread_id, user_id=current_user.id).first()
    thread_created = False  # –§–ª–∞–≥, –±—ã–ª –ª–∏ —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç—Ä–µ–¥

    # –ï—Å–ª–∏ —Ç—Ä–µ–¥–∞ –Ω–µ—Ç ‚Äì —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π
    if not thread:
        new_thread = client.beta.threads.create()
        thread_id = new_thread.id
        thread_created = True  # –§–ª–∞–≥ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–¥–∞

        thread = Thread(id=thread_id, user_id=current_user.id)
        db.add(thread)
        db.commit()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = Message(thread_id=thread_id, role="user", content=user_query)
    db.add(user_message)
    db.commit()

    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ Google –∏ –ì–ê–†–ê–ù–¢
    logs = []

    if asyncio.iscoroutinefunction(google_search):
        google_results_task = google_search(user_query, logs)
    else:
        loop = asyncio.get_event_loop()
        google_results_task = loop.run_in_executor(None, google_search, user_query, logs)

    if asyncio.iscoroutinefunction(process_garant_request):
        garant_results_task = process_garant_request(user_query, logs, lambda lvl, msg: logs.append(msg))
    else:
        loop = asyncio.get_event_loop()
        garant_results_task = loop.run_in_executor(None, process_garant_request, user_query, logs, lambda lvl, msg: logs.append(msg))

    google_results, garant_results = await asyncio.gather(google_results_task, garant_results_task)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–µ–±-–ø–æ–∏—Å–∫–∞
    google_summaries = [f"{result['summary']} ({result['link']})" for result in google_results]

    logging.info(f"üåê –ù–∞–π–¥–µ–Ω–æ {len(google_summaries)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–µ–±-–ø–æ–∏—Å–∫–∞")
    logging.info(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ì–ê–†–ê–ù–¢: {garant_results}")

    # –ó–∞–ø—Ä–æ—Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É
    assistant_response = send_custom_request(
        user_query=user_query,
        web_links=google_summaries,
        document_summary=garant_results
    )
    logging.info(assistant_response)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    assistant_message = Message(thread_id=thread_id, role="assistant", content=assistant_response)
    db.add(assistant_message)
    db.commit()

    response = {"assistant_response": assistant_response}
    
    if thread_created:
        response["new_thread_id"] = thread_id  # –ï—Å–ª–∏ —Ç—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ ID

    return response



# @router.post("/chat/{thread_id}")
# async def chat_in_thread(
#     thread_id: str,
#     query: dict,
#     current_user: User = Depends(get_current_user),
#     db: Session = Depends(database.get_db),
#     token: str = Depends(oauth2_scheme)
# ):
#     """
#     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–¥, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ URL.
#     """
#     user_query = query.get("query")
#     if not user_query:
#         raise HTTPException(status_code=400, detail="–ó–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")


#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç—Ä–µ–¥
#     thread = db.query(Thread).filter_by(id=thread_id, user_id=current_user.id).first()
#     if not thread:
#         raise HTTPException(status_code=404, detail="–¢—Ä–µ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω!")


#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
#     user_message = Message(thread_id=thread_id, role="user", content=user_query)
#     db.add(user_message)
#     db.commit()


#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ OpenAI Assistant
#     client.beta.threads.messages.create(
#         thread_id=thread_id,
#         role="user",
#         content=user_query
#     )


#     # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
#     run = client.beta.threads.runs.create(
#         thread_id=thread_id,
#         assistant_id=ASSISTANT_ID
#     )


#     # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
#     while True:
#         run_status = client.beta.threads.runs.retrieve(thread_id=thread_id, run_id=run.id)
#         if run_status.status in ["completed", "failed", "cancelled"]:
#             break
#         await asyncio.sleep(1)


#     # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
#     if run_status.status == "completed":
#         messages = client.beta.threads.messages.list(thread_id=thread_id)
#         latest_message = messages.data[0]
#         assistant_response = latest_message.content[0].text.value

#         assistant_message = Message(thread_id=thread_id, role="assistant", content=assistant_response)
#         db.add(assistant_message)
#         db.commit()

#         return {"assistant_response": assistant_response}

#     raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ OpenAI Assistant.")


# ========================== API –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –§–ê–ô–õ–û–í ==========================

@router.post("/upload_file")
async def upload_file(
    file: UploadFile = File(...),
    current_user: User = Depends(get_current_user),
    db: Session = Depends(database.get_db)
):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç –µ–≥–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ç—Ä–µ–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    if not file.filename.endswith(".docx"):
        raise HTTPException(status_code=400, detail="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ .docx —Ñ–∞–π–ª—ã.")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    thread = db.query(Thread).filter_by(user_id=current_user.id).order_by(Thread.created_at.desc()).first()
    if not thread:
        return JSONResponse(status_code=400, content={"error": "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —á–∞—Ç."})

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    filename = secure_filename(file.filename)
    file_path = os.path.join(UPLOAD_FOLDER, filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(file_path, "wb") as buffer:
        buffer.write(await file.read())

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ë–î
    file_message = Message(thread_id=thread.id, role="user", content=file_path)
    db.add(file_message)
    db.commit()

    return {"message": "–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω", "filename": filename}



# ========================== API –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô ==========================

@router.get("/messages/{thread_id}")
async def get_messages(thread_id: str, current_user: User = Depends(get_current_user), db: Session = Depends(database.get_db)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–¥–∞.
    """
    messages = db.query(Message).filter_by(thread_id=thread_id).order_by(Message.created_at).all()
    return {"messages": [{"role": msg.role, "content": msg.content, "created_at": msg.created_at} for msg in messages]}



# ========================== API –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –¢–†–ï–î–û–í ==========================

@router.post("/create_thread")
async def create_new_thread(
    current_user: User = Depends(get_current_user),
    db: Session = Depends(database.get_db)
):
    """
    –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π OpenAI thread, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID.
    """
    # –°–æ–∑–¥–∞—ë–º —Ç—Ä–µ–¥ –≤ OpenAI
    thread = client.beta.threads.create()
    thread_id = thread.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–¥ –≤ –ë–î
    new_thread = Thread(id=thread_id, user_id=current_user.id)
    db.add(new_thread)
    db.commit()

    return {"message": "Thread created successfully.", "thread_id": thread_id}

# ========================== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –†–û–£–¢–ï–†–ê ==========================
app.include_router(router)
