import requests
import urllib3
import time
import logging
import asyncio
from functools import wraps


urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

session = requests.Session()
session.verify = False  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL

DEFAULT_HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
}

def get_url_content(url, headers=None, timeout=10):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL."""
    if headers is None:
        headers = DEFAULT_HEADERS  # –î–æ–±–∞–≤–ª—è–µ–º User-Agent
    else:
        headers.update(DEFAULT_HEADERS)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏

    try:
        response = session.get(url, headers=headers, timeout=timeout)
        response.raise_for_status()
        return response.text
    except requests.exceptions.HTTPError as e:
        print(f"[ERROR]: HTTP –æ—à–∏–±–∫–∞ –¥–ª—è {url}: {e}")
    except requests.exceptions.RequestException as e:
        print(f"[ERROR]: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ {url}: {e}")
    return None




logging.basicConfig(level=logging.DEBUG)

def measure_time(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ (async –∏ sync)."""
    
    print(f"üîç –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ–Ω—ë–Ω –∫ —Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –ª–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä

    @wraps(func)
    async def async_wrapper(*args, **kwargs):
        print(f"üöÄ –í—ã–∑–æ–≤ async-—Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞
        start_time = time.perf_counter()
        result = await func(*args, **kwargs)
        end_time = time.perf_counter()
        execution_time = end_time - start_time
        log_message = f"‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {func.__name__} (async): {execution_time:.6f} —Å–µ–∫—É–Ω–¥"
        logging.info(log_message)
        print(log_message)  # –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        return result

    @wraps(func)
    def sync_wrapper(*args, **kwargs):
        print(f"üöÄ –í—ã–∑–æ–≤ sync-—Ñ—É–Ω–∫—Ü–∏–∏: {func.__name__}")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∑–æ–≤–∞
        start_time = time.perf_counter()
        result = func(*args, **kwargs)
        end_time = time.perf_counter()
        execution_time = end_time - start_time
        log_message = f"‚ö° –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {func.__name__}: {execution_time:.6f} —Å–µ–∫—É–Ω–¥"
        logging.info(log_message)
        print(log_message)  # –í—ã–≤–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
        return result

    if asyncio.iscoroutinefunction(func):
        return async_wrapper  # –î–ª—è async-—Ñ—É–Ω–∫—Ü–∏–π
    return sync_wrapper  # –î–ª—è sync-—Ñ—É–Ω–∫—Ü–∏–π
